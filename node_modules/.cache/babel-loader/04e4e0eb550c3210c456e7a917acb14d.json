{"ast":null,"code":"var _jsxFileName = \"/Users/chriscable/Desktop/new projects/retrofitting projects/tictactoe/tictactoe/src/components/grid.js\";\nimport React from 'react';\nconst winningCombinations = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 4, 7], [2, 5, 8], [3, 6, 9], [1, 5, 9], [3, 5, 7]];\n\nclass Grid extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      playerScore: 0,\n      computerScore: 0,\n      playerCellClicks: [],\n      computerCellClicks: [],\n      cellContent: \"\",\n      currentPlayer: false,\n      currentComputer: false\n    };\n    this.clickedCell = this.clickedCell.bind(this);\n  }\n\n  componentDidMount() {\n    this.firstPlayer();\n  }\n\n  firstPlayer() {\n    let random = Math.floor(Math.random() * 11);\n\n    if (random <= 5) {\n      this.setState({\n        currentPlayer: true\n      });\n    } else {\n      this.setState({\n        currentComputer: true\n      });\n    }\n  }\n\n  clickedCell(e) {\n    //player turn\n    if (this.state.currentPlayer === false) {\n      return;\n    }\n\n    let cell = e.target;\n\n    if (cell.innerHTML === \"X\" || cell.innerHTML === \"O\") {\n      return;\n    }\n\n    if (this.props.setX) {\n      cell.innerHTML = \"X\";\n    } else if (this.props.setO) {\n      cell.innerHTML = \"O\";\n    }\n\n    this.setState({\n      playerCellClicks: [...this.state.playerCellClicks, parseInt(cell.id)],\n      currentPlayer: false,\n      currentComputer: true\n    }); // console.log(this.state.playerCellClicks)\n    // this.isWinner()\n    //this function doesnt work because the state updates an item late because it\n    //doesnt immediately catch the first item\n  }\n\n  computerTurn() {\n    console.log(\"my turn\");\n    setTimeout(() => {\n      if (this.state.currentComputer === false) {\n        return;\n      } // console.log(\"im the computer\")\n\n\n      let random = Math.floor(Math.random() * 9);\n      const divArr = document.querySelectorAll(\"div.grid\");\n\n      if (divArr[random].innerHTML === \"X\" || divArr[random].innerHTML === \"O\") {\n        this.computerTurn();\n      } else {\n        if (this.props.setX) {\n          divArr[random].innerHTML = \"O\";\n        } else {\n          divArr[random].innerHTML = \"X\";\n        }\n\n        this.setState({\n          computerCellClicks: [...this.state.computerCellClicks, parseInt(divArr[random].id)],\n          currentComputer: false,\n          currentPlayer: true\n        });\n      }\n    }, 3000);\n  } //setting the settimeout to 3000 makes the double alerts stop happening, likewise setting it to zero\n  //makes it happen everytime. The state being set by the computerturn sometimes lags and then sets\n  //while componentdidupdate is executing after I have won, thus causing it to fire off the alert twice\n  //used arrow function for setTimeout, otherwise it causes scoping problems and makes the program crash\n\n\n  componentDidUpdate() {\n    if (this.state.playerCellClicks.length >= 2) {\n      //fix this, https://stackoverflow.com/questions/45152060/how-to-compare-an-array-to-an-array-of-arrays\n      let res = winningCombinations.filter(v => v.filter(c => {\n        return this.state.playerCellClicks.indexOf(c) > -1;\n      }).length >= 2);\n      console.log(res);\n      let finalFilter = res.filter(v => v.filter(c => {\n        return this.state.playerCellClicks.indexOf(c) > -1;\n      }).length === 3);\n      console.log(finalFilter);\n\n      for (let i = 0; i < winningCombinations.length; i++) {\n        if (JSON.stringify(finalFilter[0]) === JSON.stringify(winningCombinations[i])) {\n          this.endGameLogic();\n        }\n      } //   if(JSON.stringify(this.state.playerCellClicks) === JSON.stringify(finalFilter[0])){\n      //\n      //   }\n\n    }\n\n    if (this.state.computerCellClicks.length >= 2) {\n      let res = winningCombinations.filter(v => v.filter(c => {\n        return this.state.computerCellClicks.indexOf(c) > -1;\n      }).length >= 2);\n      let finalFilter = res.filter(v => v.filter(c => {\n        return this.state.computerCellClicks.indexOf(c) > -1;\n      }).length === 3);\n\n      for (let i = 0; i < winningCombinations.length; i++) {\n        if (JSON.stringify(finalFilter[0]) === JSON.stringify(winningCombinations[i])) {\n          this.endGameLogic();\n        }\n      }\n    }\n  }\n\n  endGameLogic() {\n    console.log(\"hi\");\n    setTimeout(() => {\n      this.setState({\n        currentPlayer: false,\n        currentComputer: false,\n        playerCellClicks: []\n      });\n      alert(`WINNER!`);\n\n      if (window.confirm(\"Do you want to play again?\")) {\n        const divArr = document.querySelectorAll(\"div.grid\");\n\n        for (let i = 0; i < divArr.length; i++) {\n          divArr[i].innerHTML = \"\";\n        }\n\n        this.firstPlayer();\n      } else {\n        this.props.reset();\n      }\n    }, 500);\n  } //finally fixed the infinite loop problem, have to clear out this.state.playcellclicks first in setstate\n  //without this the conditions for the setstate continue\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"gridMainDiv\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: `p1Banner ${this.state.currentPlayer === true ? \"p1BannerActive\" : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 5\n      }\n    }, this.state.playerScore, \" Player 1\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: `computerBanner ${this.state.currentComputer === true ? \"computerBannerActive\" : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 5\n      }\n    }, this.state.computerScore, \" Computer\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"resetBanner\",\n      onClick: this.props.reset,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 5\n      }\n    }, \"Reset All\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"gridInnerDiv\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"gridDiv\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      id: \"1\",\n      onClick: this.clickedCell,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      id: \"2\",\n      onClick: this.clickedCell,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      id: \"3\",\n      onClick: this.clickedCell,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      id: \"4\",\n      onClick: this.clickedCell,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      id: \"5\",\n      onClick: this.clickedCell,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      id: \"6\",\n      onClick: this.clickedCell,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      id: \"7\",\n      onClick: this.clickedCell,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      id: \"8\",\n      onClick: this.clickedCell,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      id: \"9\",\n      onClick: this.clickedCell,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 5\n      }\n    }))), this.computerTurn());\n  }\n\n}\n\nexport default Grid;","map":{"version":3,"sources":["/Users/chriscable/Desktop/new projects/retrofitting projects/tictactoe/tictactoe/src/components/grid.js"],"names":["React","winningCombinations","Grid","Component","constructor","state","playerScore","computerScore","playerCellClicks","computerCellClicks","cellContent","currentPlayer","currentComputer","clickedCell","bind","componentDidMount","firstPlayer","random","Math","floor","setState","e","cell","target","innerHTML","props","setX","setO","parseInt","id","computerTurn","console","log","setTimeout","divArr","document","querySelectorAll","componentDidUpdate","length","res","filter","v","c","indexOf","finalFilter","i","JSON","stringify","endGameLogic","alert","window","confirm","reset","render"],"mappings":"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","sourcesContent":["import React from 'react';\nconst winningCombinations = [[1,2,3],[4,5,6],[7,8,9],[1,4,7],[2,5,8],[3,6,9],[1,5,9],[3,5,7]]\nclass Grid extends React.Component {\n\n  constructor(){\n    super()\n\n    this.state = {\n      playerScore: 0,\n      computerScore: 0,\n      playerCellClicks: [],\n      computerCellClicks: [],\n      cellContent: \"\",\n      currentPlayer: false,\n      currentComputer: false\n    }\n    this.clickedCell = this.clickedCell.bind(this)\n  }\n\n  componentDidMount(){\n    this.firstPlayer()\n  }\n\n  firstPlayer(){\n    let random = Math.floor(Math.random()*11)\n    if(random <= 5){\n      this.setState({\n        currentPlayer: true\n      })\n    } else {\n      this.setState({\n        currentComputer: true\n      })\n    }\n  }\n\n  clickedCell(e){ //player turn\n    if(this.state.currentPlayer === false){return}\n    let cell = e.target\n    if(cell.innerHTML === \"X\" || cell.innerHTML === \"O\"){return}\n    if(this.props.setX){\n    cell.innerHTML = \"X\"\n    } else if(this.props.setO){\n    cell.innerHTML = \"O\"\n    }\n    this.setState({\n      playerCellClicks: [...this.state.playerCellClicks, parseInt(cell.id)],\n      currentPlayer: false,\n      currentComputer: true\n    })\n    // console.log(this.state.playerCellClicks)\n    // this.isWinner()\n    //this function doesnt work because the state updates an item late because it\n    //doesnt immediately catch the first item\n  }\n\n  computerTurn(){\n    console.log(\"my turn\")\n    setTimeout(() => {\n    if(this.state.currentComputer === false){return}\n    // console.log(\"im the computer\")\n    let random = Math.floor(Math.random()*(9))\n    const divArr = document.querySelectorAll(\"div.grid\")\n    if(divArr[random].innerHTML === \"X\" || divArr[random].innerHTML === \"O\"){\n    this.computerTurn()\n    } else {\n    if(this.props.setX){\n    divArr[random].innerHTML = \"O\"\n  } else {\n    divArr[random].innerHTML = \"X\"\n  }\n\n    this.setState({\n      computerCellClicks: [...this.state.computerCellClicks, parseInt(divArr[random].id)],\n      currentComputer: false,\n      currentPlayer: true\n    })\n    }\n  }, 3000)\n  }\n  //setting the settimeout to 3000 makes the double alerts stop happening, likewise setting it to zero\n  //makes it happen everytime. The state being set by the computerturn sometimes lags and then sets\n  //while componentdidupdate is executing after I have won, thus causing it to fire off the alert twice\n  //used arrow function for setTimeout, otherwise it causes scoping problems and makes the program crash\n\n  componentDidUpdate(){\n    if(this.state.playerCellClicks.length >= 2){ //fix this, https://stackoverflow.com/questions/45152060/how-to-compare-an-array-to-an-array-of-arrays\n        let res = winningCombinations.filter(v => v.filter(c => {\n          return this.state.playerCellClicks.indexOf(c) > -1;\n        }).length >= 2);\n        console.log(res)\n        let finalFilter = res.filter(v => v.filter(c => {\n          return this.state.playerCellClicks.indexOf(c) > -1;\n        }).length === 3);\n        console.log(finalFilter)\n        for(let i=0;i< winningCombinations.length;i++){\n          if(JSON.stringify(finalFilter[0]) === JSON.stringify(winningCombinations[i])){\n            this.endGameLogic()\n          }\n        }\n      //   if(JSON.stringify(this.state.playerCellClicks) === JSON.stringify(finalFilter[0])){\n      //\n      //   }\n      }\n\n      if(this.state.computerCellClicks.length >= 2){\n        let res = winningCombinations.filter(v => v.filter(c => {\n          return this.state.computerCellClicks.indexOf(c) > -1;\n        }).length >= 2);\n        let finalFilter = res.filter(v => v.filter(c => {\n          return this.state.computerCellClicks.indexOf(c) > -1;\n        }).length === 3);\n        for(let i=0;i< winningCombinations.length;i++){\n          if(JSON.stringify(finalFilter[0]) === JSON.stringify(winningCombinations[i])){\n            this.endGameLogic()\n          }\n        }\n      }\n    }\n\n    endGameLogic(){\n      console.log(\"hi\")\n      setTimeout(()=>{\n        this.setState({\n          currentPlayer: false,\n          currentComputer: false,\n          playerCellClicks: []\n        })\n      alert(`WINNER!`)\n      if(window.confirm(\"Do you want to play again?\")){\n        const divArr = document.querySelectorAll(\"div.grid\")\n        for(let i=0;i< divArr.length;i++){\n          divArr[i].innerHTML = \"\"\n        }\n        this.firstPlayer()\n      } else {\n        this.props.reset()\n      }\n    }, 500)\n    }\n  //finally fixed the infinite loop problem, have to clear out this.state.playcellclicks first in setstate\n  //without this the conditions for the setstate continue\n\n  render(){\n  return (\n    <div className=\"gridMainDiv\">\n    <div className={`p1Banner ${this.state.currentPlayer === true ? \"p1BannerActive\" : \"\"}`}>{this.state.playerScore} Player 1</div>\n    <div className={`computerBanner ${this.state.currentComputer === true ? \"computerBannerActive\" : \"\"}`}>{this.state.computerScore} Computer</div>\n    <div className=\"resetBanner\" onClick={this.props.reset}>Reset All</div>\n    <div className=\"gridInnerDiv\">\n    <div className=\"gridDiv\">\n    <div className=\"grid\" id=\"1\" onClick={this.clickedCell}></div>\n    <div className=\"grid\" id=\"2\" onClick={this.clickedCell}></div>\n    <div className=\"grid\" id=\"3\" onClick={this.clickedCell}></div>\n    <div className=\"grid\" id=\"4\" onClick={this.clickedCell}></div>\n    <div className=\"grid\" id=\"5\" onClick={this.clickedCell}></div>\n    <div className=\"grid\" id=\"6\" onClick={this.clickedCell}></div>\n    <div className=\"grid\" id=\"7\" onClick={this.clickedCell}></div>\n    <div className=\"grid\" id=\"8\" onClick={this.clickedCell}></div>\n    <div className=\"grid\" id=\"9\" onClick={this.clickedCell}></div>\n    </div>\n    </div>\n    {this.computerTurn()}\n    </div>\n  );\n}\n}\n\nexport default Grid;\n"]},"metadata":{},"sourceType":"module"}
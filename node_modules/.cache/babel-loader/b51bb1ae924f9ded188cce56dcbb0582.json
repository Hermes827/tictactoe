{"ast":null,"code":"var _jsxFileName = \"/Users/chriscable/Desktop/new projects/do projects later/tictactoe/tictactoe/tictactoe/src/components/grid.js\";\nimport React from 'react';\nconst winningCombinations = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 4, 7], [2, 5, 8], [3, 6, 9], [1, 5, 9], [3, 5, 7]];\n\nclass Grid extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      playerScore: 0,\n      computerScore: 0,\n      playerCellClicks: [],\n      computerCellClicks: [],\n      cellContent: \"\",\n      currentPlayer: true\n    };\n    this.clickedCell = this.clickedCell.bind(this);\n  } // clearScoreAndReset(){\n  //   this.props.reset()\n  //   this.setState({\n  //     playerScore: 0,\n  //     computerScore: 0\n  //   })\n  // }\n\n\n  clickedCell(e) {\n    if (this.state.playerCellClicks.length === 3 || this.state.currentPlayer === false) {\n      return;\n    }\n\n    let cell = e.target;\n\n    if (cell.innerHTML === \"X\" || cell.innerHTML === \"O\") {\n      return;\n    }\n\n    cell.innerHTML = \"X\";\n    this.setState({\n      playerCellClicks: [...this.state.playerCellClicks, parseInt(cell.id)],\n      currentPlayer: false\n    });\n    console.log(this.state.playerCellClicks);\n  } // computerTurn(){\n  //   if(this.state.currentPlayer === false && this.state.computerCellClicks.length !== 3){\n  //     let cell = e.target\n  //\n  //   }\n  // }\n\n\n  isWinner() {\n    if (this.state.playerCellClicks.length === 3) {\n      for (let i = 0; i <= winningCombinations.length; i++) {\n        if (JSON.stringify(this.state.playerCellClicks) === JSON.stringify(winningCombinations[i])) {\n          console.log(\"winner\");\n          console.log(this.state.playerCellClicks);\n        }\n      }\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"gridMainDiv\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"p1Banner\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 5\n      }\n    }, this.state.playerScore, \" Player 1\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"computerBanner\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 5\n      }\n    }, this.state.computerScore, \" Computer\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"resetBanner\",\n      onClick: this.props.reset,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 5\n      }\n    }, \"Reset All\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"gridInnerDiv\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"gridDiv\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      id: \"1\",\n      onClick: this.clickedCell,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      id: \"2\",\n      onClick: this.clickedCell,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      id: \"3\",\n      onClick: this.clickedCell,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      id: \"4\",\n      onClick: this.clickedCell,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      id: \"5\",\n      onClick: this.clickedCell,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      id: \"6\",\n      onClick: this.clickedCell,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      id: \"7\",\n      onClick: this.clickedCell,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      id: \"8\",\n      onClick: this.clickedCell,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      id: \"9\",\n      onClick: this.clickedCell,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 5\n      }\n    }))), this.isWinner());\n  }\n\n}\n\nexport default Grid;","map":{"version":3,"sources":["/Users/chriscable/Desktop/new projects/do projects later/tictactoe/tictactoe/tictactoe/src/components/grid.js"],"names":["React","winningCombinations","Grid","Component","constructor","state","playerScore","computerScore","playerCellClicks","computerCellClicks","cellContent","currentPlayer","clickedCell","bind","e","length","cell","target","innerHTML","setState","parseInt","id","console","log","isWinner","i","JSON","stringify","render","props","reset"],"mappings":"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","sourcesContent":["import React from 'react';\nconst winningCombinations = [[1,2,3],[4,5,6],[7,8,9],[1,4,7],[2,5,8],[3,6,9],[1,5,9],[3,5,7]]\n\nclass Grid extends React.Component {\n\n  constructor(){\n    super()\n\n    this.state = {\n      playerScore: 0,\n      computerScore: 0,\n      playerCellClicks: [],\n      computerCellClicks: [],\n      cellContent: \"\",\n      currentPlayer: true\n    }\n    this.clickedCell = this.clickedCell.bind(this)\n  }\n\n  // clearScoreAndReset(){\n  //   this.props.reset()\n  //   this.setState({\n  //     playerScore: 0,\n  //     computerScore: 0\n  //   })\n  // }\n  clickedCell(e){\n    if(this.state.playerCellClicks.length === 3 || this.state.currentPlayer === false){return}\n    let cell = e.target\n    if(cell.innerHTML === \"X\" || cell.innerHTML === \"O\"){return}\n    cell.innerHTML = \"X\"\n    this.setState({\n      playerCellClicks: [...this.state.playerCellClicks, parseInt(cell.id)],\n      currentPlayer: false\n    })\n    \n    console.log(this.state.playerCellClicks)\n  }\n\n  // computerTurn(){\n  //   if(this.state.currentPlayer === false && this.state.computerCellClicks.length !== 3){\n  //     let cell = e.target\n  //\n  //   }\n  // }\n\n  isWinner(){\n    if(this.state.playerCellClicks.length === 3){\n      for(let i=0;i<=winningCombinations.length;i++){\n        if(JSON.stringify(this.state.playerCellClicks) === JSON.stringify(winningCombinations[i])){\n          console.log(\"winner\")\n          console.log(this.state.playerCellClicks)\n        }\n      }\n    }\n    }\n\n  render(){\n  return (\n    <div className=\"gridMainDiv\">\n    <div className=\"p1Banner\">{this.state.playerScore} Player 1</div>\n    <div className=\"computerBanner\">{this.state.computerScore} Computer</div>\n    <div className=\"resetBanner\" onClick={this.props.reset}>Reset All</div>\n    <div className=\"gridInnerDiv\">\n    <div className=\"gridDiv\">\n    <div className=\"grid\" id=\"1\" onClick={this.clickedCell}></div>\n    <div className=\"grid\" id=\"2\" onClick={this.clickedCell}></div>\n    <div className=\"grid\" id=\"3\" onClick={this.clickedCell}></div>\n    <div className=\"grid\" id=\"4\" onClick={this.clickedCell}></div>\n    <div className=\"grid\" id=\"5\" onClick={this.clickedCell}></div>\n    <div className=\"grid\" id=\"6\" onClick={this.clickedCell}></div>\n    <div className=\"grid\" id=\"7\" onClick={this.clickedCell}></div>\n    <div className=\"grid\" id=\"8\" onClick={this.clickedCell}></div>\n    <div className=\"grid\" id=\"9\" onClick={this.clickedCell}></div>\n    </div>\n    </div>\n    {this.isWinner()}\n    </div>\n  );\n}\n}\n\nexport default Grid;\n"]},"metadata":{},"sourceType":"module"}